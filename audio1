import librosa
# import numpy as np
# import os
# from sklearn.model_selection import train_test_split
# from keras._tf_keras.keras.models import Sequential
# from keras._tf_keras.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout
#
# # Dataset path
# data_path = 'D:/heartbeat/set_a/'
# features = []
# labels = []
#
# # Load and preprocess audio
# for file in os.listdir(data_path):
#     if file.endswith('.wav'):
#         audio, sr = librosa.load(os.path.join(data_path, file), sr=22050)
#         mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=40)
#         features.append(np.mean(mfccs.T, axis=0))
#         labels.append(1 if 'abnormal' in file else 0)
#
# X = np.array(features)
# y = np.array(labels)
#
# # Split data
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
#
# # Build CNN
# model = Sequential([
#     Conv1D(32, 3, activation='relu', input_shape=(X_train.shape[1], 1)),
#     MaxPooling1D(2),
#     Flatten(),
#     Dense(64, activation='relu'),
#     Dropout(0.5),
#     Dense(1, activation='sigmoid')
# ])
#
# model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
#
# # Reshape for Conv1D
# X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
# X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)
#
# # Train and evaluate
# model.fit(X_train, y_train, epochs=10, batch_size=16, validation_data=(X_test, y_test))
# loss, accuracy = model.evaluate(X_test, y_test)
# print(f"Test Accuracy: {accuracy * 100:.2f}%")
